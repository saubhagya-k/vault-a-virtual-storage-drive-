<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Saubhagya Vault</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css" rel="stylesheet">
    <style>
        .file-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }
        .file-card {
            transition: all 0.3s ease;
        }
        .file-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }
        .progress-bar {
            transition: width 0.3s ease;
        }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .upload-area.drag-over {
            background-color: #f0f9ff;
            border-color: #3b82f6;
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <!-- Hidden element to store files data -->
    <div id="filesData" data-files='<%= JSON.stringify(files || []) %>' class="hidden"></div>
    
    <!-- Navigation -->
    <nav class="bg-white shadow-sm py-4 px-6">
        <div class="flex justify-between items-center max-w-7xl mx-auto">
            <div class="flex items-center space-x-2">
                <div class="bg-blue-600 p-2 rounded-lg">
                    <i class="ri-folder-upload-line text-white text-xl"></i>
                </div>
                <h1 class="text-xl font-bold text-gray-800">Saubhagya Vault</h1>
            </div>
            
            <div class="flex items-center space-x-4">
                <a href="/home/register" class="text-gray-600 hover:text-blue-600">Register</a>
                <a href="/home/login" class="text-gray-600 hover:text-blue-600">Login</a>
                <button id="uploadBtn" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center shadow-md">
                    <i class="ri-upload-cloud-line mr-2"></i> Upload File
                </button>
                <a href="/home/get-rows" class="bg-gray-100 hover:bg-gray-200 text-gray-800 px-4 py-2 rounded-lg flex items-center">
                    <i class="ri-refresh-line mr-2"></i> Refresh
                </a>
                <div class="relative">
                            <!-- User icon button -->
                            <button class="text-2xl" onclick="toggleDropdown()">
                              <i class="ri-user-3-fill"></i>
                            </button>
                            
                            <!-- Dropdown menu (hidden by default) -->
                            <div id="userDropdown" class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-2 hidden z-50">
                              <div class="px-4 py-2 border-b">
                                <p class="text-sm font-medium text-gray-900"><%= user.name %></p>
                                <p class="text-xs text-gray-500 truncate"><%= user.email %></p>
                              </div>
                              <div class="px-4 py-2">
                                <button onclick="toggleTheme()" class="text-sm text-gray-700 hover:bg-gray-100 w-full text-left px-2 py-1 rounded">
                                  Toggle Theme
                                </button>
                              </div>
                              
                              <div class="px-4 py-2 border-t">
                                <a href="/logout" class="text-sm text-red-600 hover:bg-gray-100 block px-2 py-1 rounded">
                                  Logout
                                </a>
                              </div>
                            </div>
                          </div>

                          


               
            </div>
            
        </div>
    </nav>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto p-6">
        <!-- Stats Section -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                        <i class="ri-folder-upload-line text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-2xl font-bold" id="totalFiles">0</h2>
                        <p class="text-gray-600">Total Files</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-100 text-green-600">
                        <i class="ri-image-line text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-2xl font-bold" id="imageFiles">0</h2>
                        <p class="text-gray-600">Images</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                        <i class="ri-file-text-line text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-2xl font-bold" id="documentFiles">0</h2>
                        <p class="text-gray-600">Documents</p>
                    </div>
                </div>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-amber-100 text-amber-600">
                        <i class="ri-database-2-line text-2xl"></i>
                    </div>
                    <div class="ml-4">
                        <h2 class="text-2xl font-bold" id="otherFiles">0</h2>
                        <p class="text-gray-600">Other Files</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Files Section -->
        <div class="bg-white rounded-lg shadow mb-8">
            <div class="p-6 border-b flex justify-between items-center">
                <h2 class="text-xl font-semibold text-gray-800">Your Files</h2>
                <div class="flex items-center space-x-2 text-sm">
                    <span class="text-gray-600" id="storageStats">0 MB used</span>
                    <div class="w-24 bg-gray-200 rounded-full h-2">
                        <div class="bg-blue-600 h-2 rounded-full progress-bar" style="width: 0%"></div>
                    </div>
                </div>
            </div>
            <div class="p-6">
                <% if (files && files.length > 0) { %>
                    <div class="file-grid">
                        <% files.forEach(file => { %>
                            <div class="file-card bg-white rounded-lg p-4 border border-gray-200">
                                <% if (file.url.match(/\.(jpg|jpeg|png|gif|svg|webp)$/i)) { %>
                                    <div class="mb-3 h-40 flex items-center justify-center bg-gray-100 rounded-lg overflow-hidden">
                                        <img src="<%= file.url %>" alt="<%= file.name %>" class="max-h-full max-w-full object-cover" />
                                    </div>
                                <% } else if (file.url.match(/\.(pdf)$/i)) { %>
                                    <div class="mb-3 h-40 flex items-center justify-center bg-red-100 rounded-lg">
                                        <i class="ri-file-pdf-line text-5xl text-red-600"></i>
                                    </div>
                                <% } else if (file.url.match(/\.(doc|docx)$/i)) { %>
                                    <div class="mb-3 h-40 flex items-center justify-center bg-blue-100 rounded-lg">
                                        <i class="ri-file-word-line text-5xl text-blue-600"></i>
                                    </div>
                                <% } else if (file.url.match(/\.(xls|xlsx)$/i)) { %>
                                    <div class="mb-3 h-40 flex items-center justify-center bg-green-100 rounded-lg">
                                        <i class="ri-file-excel-line text-5xl text-green-600"></i>
                                    </div>
                                <% } else { %>
                                    <div class="mb-3 h-40 flex items-center justify-center bg-gray-100 rounded-lg">
                                        <i class="ri-file-text-line text-5xl text-gray-500"></i>
                                    </div>
                                <% } %>
                                
                                <div class="truncate text-sm font-medium mb-2" title="<%= file.name %>">
                                    <%= file.name.length > 12 ? file.name.substring(0, 12) + '...' : file.name %>
                                 <div class="text-xs text-gray-500 mt-1">
                                       <% 
                                          if (file.created_at) {
                                               const uploadDate = new Date(file.created_at);
                                               const now = new Date();
                                               const diffMs = now - uploadDate;
                                               const diffMins = Math.floor(diffMs / 60000);
                                               const diffHours = Math.floor(diffMs / 3600000);
                                               const diffDays = Math.floor(diffMs / 86400000);
                                               
                                               let timeText;
                                               if (diffMins < 1) timeText = 'just now';
                                               else if (diffMins < 60) timeText = `${diffMins} minute${diffMins !== 1 ? 's' : ''} ago`;
                                               else if (diffHours < 24) timeText = `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;
                                               else if (diffDays < 7) timeText = `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;
                                               else timeText = uploadDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
                                                 %>
                                                     Uploaded <%= timeText %>
                                                 <% } else { %>
                                                     Upload date unknown
                                                 <% } %>
                                   </div>

                                </div>
                                
                                <div class="flex justify-between items-center">
                                    <a href="<%= file.url %>" target="_blank" 
                                       class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                                        <i class="ri-eye-line mr-1"></i> View
                                    </a>
                                    <a href="<%= file.url %>" download="<%= file.name %>" 
                                       class="text-green-600 hover:text-green-800 text-sm flex items-center">
                                        <i class="ri-download-line mr-1"></i> Download
                                    </a>
                                    <button onclick="deleteFile('<%= file.name %>')" 
                                            class="text-red-600 hover:text-red-800 text-sm flex items-center">
                                        <i class="ri-delete-bin-line mr-1"></i> Delete
                                    </button>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                <% } else { %>
                    <div class="text-center py-16">
                        <i class="ri-folder-open-line text-5xl text-gray-400 mb-4"></i>
                        <p class="text-gray-600 text-lg font-medium">No files uploaded yet</p>
                        <p class="text-gray-500 mt-2">Upload your first file to get started</p>
                        <button id="firstUploadBtn" class="mt-4 bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg">
                            Upload Your First File
                        </button>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- How it works section -->
        <div class="bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg shadow-lg text-white p-8 mb-8">
            <h2 class="text-2xl font-bold mb-6">How Saubhagya vault Works</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div class="text-center">
                    <div class="bg-white bg-opacity-20 p-4 rounded-full inline-block mb-4">
                        <i class="ri-upload-cloud-line text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-2">1. Upload Files</h3>
                    <p class="opacity-90">Securely upload your files with drag and drop functionality</p>
                </div>
                <div class="text-center">
                    <div class="bg-white bg-opacity-20 p-4 rounded-full inline-block mb-4">
                        <i class="ri-lock-line text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-2">2. Secure Storage</h3>
                    <p class="opacity-90">Your files are stored securely with industry-standard encryption</p>
                </div>
                <div class="text-center">
                    <div class="bg-white bg-opacity-20 p-4 rounded-full inline-block mb-4">
                        <i class="ri-share-line text-3xl"></i>
                    </div>
                    <h3 class="text-xl font-semibold mb-2">3. Share & Access</h3>
                    <p class="opacity-90">Easily share your files or access them from anywhere</p>
                </div>
            </div>
        </div>
    </main>

    <!-- Upload Modal -->
    <div id="uploadModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden transition-opacity duration-300">
        <div class="bg-white rounded-lg shadow-xl w-full max-w-md mx-4 transform transition-transform duration-300 scale-95 opacity-0" id="modalContent">
            <div class="flex justify-between items-center p-6 border-b">
                <h3 class="text-lg font-semibold text-gray-800">Upload File</h3>
                <button id="closeModal" class="text-gray-500 hover:text-gray-700">
                    <i class="ri-close-line text-xl"></i>
                </button>
            </div>
            <form id="uploadForm" action="/upload-file" method="post" enctype="multipart/form-data" class="p-6">
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-medium mb-2" for="file">
                        Select a file to upload
                    </label>
                    <div id="uploadArea" class="upload-area border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-blue-400 transition-colors duration-200">
                        <i class="ri-upload-cloud-2-line text-4xl text-gray-400 mb-3"></i>
                        <p class="text-gray-600">Drag & drop your file here</p>
                        <p class="text-gray-500 text-sm mt-1">or</p>
                        <label for="file" class="mt-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg inline-block cursor-pointer">
                            Browse Files
                        </label>
                        <input type="file" name="file" id="file" class="hidden" required>
                    </div>
                    <p class="text-gray-500 text-xs mt-2">Max file size: 10MB</p>
                </div>
                <div id="selectedFile" class="hidden mb-4 p-3 bg-gray-50 rounded-lg">
                    <div class="flex justify-between items-center">
                        <span class="text-sm font-medium truncate" id="fileName"></span>
                        <button type="button" id="removeFile" class="text-red-500">
                            <i class="ri-close-line"></i>
                        </button>
                    </div>
                </div>
                <div class="flex justify-end">
                    <button type="button" id="cancelUpload" class="mr-3 px-4 py-2 text-gray-700 rounded-lg border hover:bg-gray-100">
                        Cancel
                    </button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed" id="submitBtn">
                        Upload File
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Loading Overlay -->
    <div id="loadingOverlay" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg p-6 flex items-center">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-3"></div>
            <span>Uploading file, please wait...</span>
        </div>
    </div>

    <script>
        // Get files data from the hidden div
        const filesDataElement = document.getElementById('filesData');
        const files = JSON.parse(filesDataElement.getAttribute('data-files') || '[]');
        
        // DOM Elements
        const uploadBtn = document.getElementById('uploadBtn');
        const firstUploadBtn = document.getElementById('firstUploadBtn');
        const uploadModal = document.getElementById('uploadModal');
        const modalContent = document.getElementById('modalContent');
        const closeModal = document.getElementById('closeModal');
        const cancelUpload = document.getElementById('cancelUpload');
        const uploadForm = document.getElementById('uploadForm');
        const fileInput = document.getElementById('file');
        const uploadArea = document.getElementById('uploadArea');
        const selectedFile = document.getElementById('selectedFile');
        const fileName = document.getElementById('fileName');
        const removeFile = document.getElementById('removeFile');
        const submitBtn = document.getElementById('submitBtn');
        const loadingOverlay = document.getElementById('loadingOverlay');

        // Update file statistics
        function updateStats() {
            document.getElementById('totalFiles').textContent = files.length;
            
            const imageFiles = files.filter(file => file.url && file.url.match(/\.(jpg|jpeg|png|gif|svg|webp)$/i));
            document.getElementById('imageFiles').textContent = imageFiles.length;
            
            const documentFiles = files.filter(file => file.url && file.url.match(/\.(pdf|doc|docx|xls|xlsx|txt)$/i));
            document.getElementById('documentFiles').textContent = documentFiles.length;
            
            document.getElementById('otherFiles').textContent = files.length - imageFiles.length - documentFiles.length;
            
            // Update storage stats (simulated)
            const totalSize = files.length * 2.5; // Simulated average file size
            document.getElementById('storageStats').textContent = `${totalSize.toFixed(1)} MB used`;
            document.querySelector('.progress-bar').style.width = `${Math.min(totalSize, 100)}%`;
        }

        // Modal functionality
        function openModal() {
            uploadModal.classList.remove('hidden');
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 10);
        }

        function closeModalFunc() {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
                uploadModal.classList.add('hidden');
                resetForm();
            }, 300);
        }

        function resetForm() {
            uploadForm.reset();
             fileInput.value = ''; 
            selectedFile.classList.add('hidden');
            submitBtn.disabled = true;
        }

        // Event listeners
        uploadBtn.addEventListener('click', openModal);
        if (firstUploadBtn) {
            firstUploadBtn.addEventListener('click', openModal);
        }

        [closeModal, cancelUpload].forEach(btn => {
            btn.addEventListener('click', closeModalFunc);
        });

        // File selection handling
        fileInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                fileName.textContent = file.name;
                selectedFile.classList.remove('hidden');
                submitBtn.disabled = false;
                
                // Check file size
                if (file.size > 100 * 1024 * 1024) { // 10MB limit
                    alert('File size exceeds 10MB limit. Please choose a smaller file.');
                    resetForm();
                }
            }
        });

        removeFile.addEventListener('click', resetForm);

        // Drag and drop functionality
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            uploadArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            uploadArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight() {
            uploadArea.classList.add('drag-over');
        }

        function unhighlight() {
            uploadArea.classList.remove('drag-over');
        }

        uploadArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            const dt = e.dataTransfer;
            const files = dt.files;
            fileInput.files = files;
            
            if (files.length > 0) {
                const file = files[0];
                fileName.textContent = file.name;
                selectedFile.classList.remove('hidden');
                submitBtn.disabled = false;
                
                // Check file size
                if (file.size > 100 * 1024 * 1024) { // 10MB limit
                    alert('File size exceeds 100MB limit. Please choose a smaller file.');
                    resetForm();
                }
            }
        }

        uploadArea.addEventListener('click', () => {
            fileInput.click();
        });

        // Handle form submission with AJAX
        uploadForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
                const formData = new FormData(uploadForm);
                const file = fileInput.files[0];
                const submitBtn = document.getElementById('submitBtn');
                const originalText = submitBtn.textContent;

                submitBtn.disabled = true;
                submitBtn.textContent = 'Uploading...';
                loadingOverlay.classList.remove('hidden'); // Show loading
    
            
            if (!file) {
                alert('Please select a file to upload');
                return;
            }
            
            // Show loading overlay
            loadingOverlay.classList.remove('hidden');
            
            try {
                const response = await fetch('/upload-file', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                if (result.success) {
                    // Close modal and show success message
                    closeModalFunc();
                    setTimeout(() => {
                        alert('File uploaded successfully!');
                        window.location.reload();
                    }, 300);
                } else {
                    submitBtn.disabled = false;       // ✅ ADD THESE LINES TO RE-ENABLE BUTTON ON ERROR
                    submitBtn.textContent = originalText;
                    alert('Upload failed: ' + (result.error || 'Unknown error'));
                }
            } catch (error) {
                // ✅ ADD THESE LINES TO RE-ENABLE BUTTON ON ERROR
                   submitBtn.disabled = false;
                   submitBtn.textContent = originalText;
                alert('Upload failed: ' + error.message);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        });

        // Delete file function
        async function deleteFile(filename) {
            if (!confirm('Are you sure you want to delete this file? This action cannot be undone.')) return;
            
            try {
                const response = await fetch('/delete/' + encodeURIComponent(filename), {
                    method: 'POST'
                });
                
                if (response.ok) {
                    alert('File deleted successfully!');
                    window.location.reload();
                } else {
                    const error = await response.text();
                    alert('Delete failed: ' + error);
                }
            } catch (error) {
                alert('Delete failed: ' + error.message);
            }
        }

        // Initialize stats on page load
        document.addEventListener('DOMContentLoaded', updateStats);

      // for the user 
        function toggleDropdown() {
  const dropdown = document.getElementById('userDropdown');
  dropdown.classList.toggle('hidden');
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
  const dropdown = document.getElementById('userDropdown');
  const button = event.target.closest('button');
  
  if (!dropdown.contains(event.target) && button !== document.querySelector('[onclick="toggleDropdown()"]')) {
    dropdown.classList.add('hidden');
  }
});
    </script>
</body>
</html>